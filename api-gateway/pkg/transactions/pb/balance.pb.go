// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: transactions/pb/balance.proto

package pb

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type UpsertBalanceRequest_ActionType int32

const (
	UpsertBalanceRequest_INCREASE UpsertBalanceRequest_ActionType = 0
	UpsertBalanceRequest_DECREASE UpsertBalanceRequest_ActionType = 1
)

var UpsertBalanceRequest_ActionType_name = map[int32]string{
	0: "INCREASE",
	1: "DECREASE",
}

var UpsertBalanceRequest_ActionType_value = map[string]int32{
	"INCREASE": 0,
	"DECREASE": 1,
}

func (x UpsertBalanceRequest_ActionType) String() string {
	return proto.EnumName(UpsertBalanceRequest_ActionType_name, int32(x))
}

func (UpsertBalanceRequest_ActionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c54a00df4e16335d, []int{1, 0}
}

type Balance struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId               int32    `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id"`
	Type                 int32    `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	Total                int32    `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`
	CreatedAt            int32    `protobuf:"varint,5,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt            int32    `protobuf:"varint,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Balance) Reset()         { *m = Balance{} }
func (m *Balance) String() string { return proto.CompactTextString(m) }
func (*Balance) ProtoMessage()    {}
func (*Balance) Descriptor() ([]byte, []int) {
	return fileDescriptor_c54a00df4e16335d, []int{0}
}
func (m *Balance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Balance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Balance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Balance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Balance.Merge(m, src)
}
func (m *Balance) XXX_Size() int {
	return m.Size()
}
func (m *Balance) XXX_DiscardUnknown() {
	xxx_messageInfo_Balance.DiscardUnknown(m)
}

var xxx_messageInfo_Balance proto.InternalMessageInfo

func (m *Balance) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Balance) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *Balance) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *Balance) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *Balance) GetCreatedAt() int32 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Balance) GetUpdatedAt() int32 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

type UpsertBalanceRequest struct {
	UserId               int32                           `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id"`
	Type                 int32                           `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	Total                int32                           `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	Action               UpsertBalanceRequest_ActionType `protobuf:"varint,4,opt,name=action,proto3,enum=balance.UpsertBalanceRequest_ActionType" json:"action,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *UpsertBalanceRequest) Reset()         { *m = UpsertBalanceRequest{} }
func (m *UpsertBalanceRequest) String() string { return proto.CompactTextString(m) }
func (*UpsertBalanceRequest) ProtoMessage()    {}
func (*UpsertBalanceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c54a00df4e16335d, []int{1}
}
func (m *UpsertBalanceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpsertBalanceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpsertBalanceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpsertBalanceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpsertBalanceRequest.Merge(m, src)
}
func (m *UpsertBalanceRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpsertBalanceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpsertBalanceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpsertBalanceRequest proto.InternalMessageInfo

func (m *UpsertBalanceRequest) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpsertBalanceRequest) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *UpsertBalanceRequest) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *UpsertBalanceRequest) GetAction() UpsertBalanceRequest_ActionType {
	if m != nil {
		return m.Action
	}
	return UpsertBalanceRequest_INCREASE
}

type UpsertBalanceResponse struct {
	Status               int32    `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Error                string   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Id                   int32    `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	CurrentBalance       int32    `protobuf:"varint,4,opt,name=current_balance,json=currentBalance,proto3" json:"current_balance"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpsertBalanceResponse) Reset()         { *m = UpsertBalanceResponse{} }
func (m *UpsertBalanceResponse) String() string { return proto.CompactTextString(m) }
func (*UpsertBalanceResponse) ProtoMessage()    {}
func (*UpsertBalanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c54a00df4e16335d, []int{2}
}
func (m *UpsertBalanceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpsertBalanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpsertBalanceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpsertBalanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpsertBalanceResponse.Merge(m, src)
}
func (m *UpsertBalanceResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpsertBalanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpsertBalanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpsertBalanceResponse proto.InternalMessageInfo

func (m *UpsertBalanceResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *UpsertBalanceResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *UpsertBalanceResponse) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpsertBalanceResponse) GetCurrentBalance() int32 {
	if m != nil {
		return m.CurrentBalance
	}
	return 0
}

type UserBalance struct {
	Type                 int32    `protobuf:"varint,1,opt,name=type,proto3" json:"type"`
	Total                int32    `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserBalance) Reset()         { *m = UserBalance{} }
func (m *UserBalance) String() string { return proto.CompactTextString(m) }
func (*UserBalance) ProtoMessage()    {}
func (*UserBalance) Descriptor() ([]byte, []int) {
	return fileDescriptor_c54a00df4e16335d, []int{3}
}
func (m *UserBalance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserBalance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserBalance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserBalance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserBalance.Merge(m, src)
}
func (m *UserBalance) XXX_Size() int {
	return m.Size()
}
func (m *UserBalance) XXX_DiscardUnknown() {
	xxx_messageInfo_UserBalance.DiscardUnknown(m)
}

var xxx_messageInfo_UserBalance proto.InternalMessageInfo

func (m *UserBalance) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *UserBalance) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

type GetUserBalanceRequest struct {
	UserId               int32    `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetUserBalanceRequest) Reset()         { *m = GetUserBalanceRequest{} }
func (m *GetUserBalanceRequest) String() string { return proto.CompactTextString(m) }
func (*GetUserBalanceRequest) ProtoMessage()    {}
func (*GetUserBalanceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c54a00df4e16335d, []int{4}
}
func (m *GetUserBalanceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUserBalanceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUserBalanceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUserBalanceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUserBalanceRequest.Merge(m, src)
}
func (m *GetUserBalanceRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetUserBalanceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUserBalanceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetUserBalanceRequest proto.InternalMessageInfo

func (m *GetUserBalanceRequest) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type GetUserBalanceResponse struct {
	Status               int32          `protobuf:"varint,1,opt,name=status,proto3" json:"status"`
	Error                string         `protobuf:"bytes,2,opt,name=error,proto3" json:"error"`
	Balances             []*UserBalance `protobuf:"bytes,3,rep,name=balances,proto3" json:"balances"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *GetUserBalanceResponse) Reset()         { *m = GetUserBalanceResponse{} }
func (m *GetUserBalanceResponse) String() string { return proto.CompactTextString(m) }
func (*GetUserBalanceResponse) ProtoMessage()    {}
func (*GetUserBalanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c54a00df4e16335d, []int{5}
}
func (m *GetUserBalanceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUserBalanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUserBalanceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUserBalanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUserBalanceResponse.Merge(m, src)
}
func (m *GetUserBalanceResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetUserBalanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUserBalanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetUserBalanceResponse proto.InternalMessageInfo

func (m *GetUserBalanceResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *GetUserBalanceResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *GetUserBalanceResponse) GetBalances() []*UserBalance {
	if m != nil {
		return m.Balances
	}
	return nil
}

func init() {
	proto.RegisterEnum("balance.UpsertBalanceRequest_ActionType", UpsertBalanceRequest_ActionType_name, UpsertBalanceRequest_ActionType_value)
	proto.RegisterType((*Balance)(nil), "balance.Balance")
	proto.RegisterType((*UpsertBalanceRequest)(nil), "balance.UpsertBalanceRequest")
	proto.RegisterType((*UpsertBalanceResponse)(nil), "balance.UpsertBalanceResponse")
	proto.RegisterType((*UserBalance)(nil), "balance.UserBalance")
	proto.RegisterType((*GetUserBalanceRequest)(nil), "balance.GetUserBalanceRequest")
	proto.RegisterType((*GetUserBalanceResponse)(nil), "balance.GetUserBalanceResponse")
}

func init() { proto.RegisterFile("transactions/pb/balance.proto", fileDescriptor_c54a00df4e16335d) }

var fileDescriptor_c54a00df4e16335d = []byte{
	// 532 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x54, 0xcd, 0x8e, 0xd3, 0x30,
	0x10, 0x5e, 0xb7, 0xdb, 0xbf, 0xe9, 0x12, 0x90, 0x69, 0x97, 0xa8, 0x62, 0xeb, 0x55, 0x84, 0x44,
	0x2f, 0xb4, 0xa8, 0x5c, 0x11, 0xa2, 0x81, 0x0a, 0xad, 0x84, 0x10, 0x72, 0xd9, 0x0b, 0x97, 0x2a,
	0x6d, 0xac, 0xaa, 0x62, 0x95, 0x04, 0xdb, 0x41, 0xda, 0xe7, 0xe0, 0xc2, 0x85, 0xe7, 0xe0, 0x11,
	0xe0, 0x88, 0x78, 0x80, 0x08, 0x95, 0x5b, 0x9e, 0x02, 0xc5, 0x76, 0x9a, 0x36, 0xea, 0xc2, 0x6d,
	0xe6, 0xf3, 0xcc, 0x78, 0xbe, 0xef, 0xb3, 0x0c, 0x67, 0x92, 0x7b, 0x81, 0xf0, 0x96, 0x72, 0x1d,
	0x06, 0x62, 0x14, 0x2d, 0x46, 0x0b, 0xef, 0xca, 0x0b, 0x96, 0x6c, 0x18, 0xf1, 0x50, 0x86, 0xb8,
	0x61, 0xd2, 0x1e, 0xac, 0xc2, 0x55, 0xa8, 0x41, 0xe7, 0x3b, 0x82, 0x86, 0xab, 0x71, 0x6c, 0x41,
	0x65, 0xed, 0xdb, 0xe8, 0x1c, 0x0d, 0x6a, 0xb4, 0xb2, 0xf6, 0xf1, 0x03, 0x68, 0xc4, 0x82, 0xf1,
	0xf9, 0xda, 0xb7, 0x2b, 0x19, 0xe8, 0xb6, 0xd3, 0x84, 0xe4, 0x10, 0xad, 0x67, 0xc1, 0x85, 0x8f,
	0x31, 0x1c, 0xcb, 0xeb, 0x88, 0xd9, 0x55, 0xd5, 0xa7, 0x62, 0xdc, 0x81, 0x9a, 0x0c, 0xa5, 0x77,
	0x65, 0x1f, 0x2b, 0x50, 0x27, 0xf8, 0x11, 0xc0, 0x92, 0x33, 0x4f, 0x32, 0x7f, 0xee, 0x49, 0xbb,
	0xa6, 0x46, 0x5a, 0x69, 0x42, 0x76, 0x50, 0xda, 0x32, 0xf1, 0x44, 0x66, 0xe5, 0x71, 0xe4, 0xe7,
	0xe5, 0xf5, 0xa2, 0xbc, 0x40, 0x69, 0xcb, 0xc4, 0x13, 0xe9, 0xfc, 0x42, 0xd0, 0xb9, 0x8c, 0x04,
	0xe3, 0xd2, 0xf0, 0xa1, 0xec, 0x63, 0xcc, 0x84, 0xdc, 0xa5, 0x81, 0xfe, 0x4f, 0xa3, 0x72, 0x88,
	0x46, 0x75, 0x97, 0xc6, 0x73, 0xa8, 0x6b, 0x8d, 0x15, 0x3b, 0x6b, 0x3c, 0x18, 0xe6, 0x3a, 0x1f,
	0xba, 0x7e, 0x38, 0x51, 0xb5, 0xef, 0xae, 0x23, 0x46, 0x4d, 0x9f, 0x33, 0x00, 0x28, 0x50, 0x7c,
	0x02, 0xcd, 0x8b, 0x37, 0x2f, 0xe8, 0x74, 0x32, 0x9b, 0xde, 0x39, 0xca, 0xb2, 0x97, 0x53, 0x93,
	0x21, 0xe7, 0x33, 0x82, 0x6e, 0x69, 0xaa, 0x88, 0xc2, 0x40, 0x30, 0x7c, 0x0a, 0x75, 0x21, 0x3d,
	0x19, 0x0b, 0x63, 0x98, 0xc9, 0xb2, 0x9d, 0x19, 0xe7, 0x21, 0x57, 0x44, 0x5a, 0x54, 0x27, 0xc6,
	0xda, 0xea, 0xd6, 0xda, 0xa7, 0x70, 0x7b, 0x19, 0x73, 0xce, 0x02, 0x39, 0x37, 0xcb, 0x6b, 0xab,
	0xdc, 0xbb, 0x69, 0x42, 0xca, 0x47, 0xd4, 0x32, 0x80, 0xd9, 0xc1, 0x79, 0x0d, 0xed, 0x4b, 0xc1,
	0x78, 0xfe, 0x6e, 0xee, 0x1b, 0xe9, 0xb4, 0xba, 0xcd, 0x34, 0x21, 0x2a, 0x37, 0x22, 0x92, 0x5c,
	0x44, 0xfd, 0x86, 0x5a, 0x69, 0x42, 0x34, 0x60, 0xf4, 0x74, 0x1e, 0x43, 0xf7, 0x15, 0x93, 0x3b,
	0x03, 0x73, 0xe3, 0xee, 0x95, 0x8c, 0xcb, 0xbd, 0x72, 0xbe, 0x22, 0x38, 0x2d, 0xb7, 0x18, 0x59,
	0x9c, 0x7d, 0x59, 0x5c, 0x48, 0x13, 0x62, 0x90, 0xad, 0x44, 0x64, 0x4f, 0x22, 0xbd, 0x91, 0x02,
	0x72, 0xb5, 0x9e, 0x41, 0xd3, 0x50, 0x17, 0x76, 0xf5, 0xbc, 0x3a, 0x68, 0x8f, 0x3b, 0x85, 0xc7,
	0xc5, 0xa5, 0xee, 0x49, 0x9a, 0x90, 0x6d, 0x25, 0xdd, 0x46, 0xe3, 0x6f, 0x08, 0x2c, 0x53, 0x33,
	0x63, 0xfc, 0xd3, 0x7a, 0xc9, 0xf0, 0x5b, 0xb8, 0xb5, 0xe7, 0x23, 0x3e, 0xfb, 0xe7, 0xab, 0xe9,
	0xf5, 0x6f, 0x3a, 0xd6, 0x3c, 0x9d, 0x23, 0x3c, 0x03, 0x6b, 0x5f, 0x03, 0x5c, 0xf4, 0x1c, 0xd4,
	0xb3, 0x47, 0x6e, 0x3c, 0xcf, 0x87, 0xba, 0x0f, 0x7f, 0x6c, 0xfa, 0xe8, 0xe7, 0xa6, 0x8f, 0x7e,
	0x6f, 0xfa, 0xe8, 0xcb, 0x9f, 0xfe, 0xd1, 0xfb, 0xee, 0x70, 0x14, 0x7d, 0x58, 0x8d, 0x4a, 0x5f,
	0xcb, 0xa2, 0xae, 0xbe, 0x8f, 0x27, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x70, 0xdb, 0x42, 0x81,
	0x74, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BalanceServiceClient is the client API for BalanceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BalanceServiceClient interface {
	UpsertBalance(ctx context.Context, in *UpsertBalanceRequest, opts ...grpc.CallOption) (*UpsertBalanceResponse, error)
	GetUserBalance(ctx context.Context, in *GetUserBalanceRequest, opts ...grpc.CallOption) (*GetUserBalanceResponse, error)
}

type balanceServiceClient struct {
	cc *grpc.ClientConn
}

func NewBalanceServiceClient(cc *grpc.ClientConn) BalanceServiceClient {
	return &balanceServiceClient{cc}
}

func (c *balanceServiceClient) UpsertBalance(ctx context.Context, in *UpsertBalanceRequest, opts ...grpc.CallOption) (*UpsertBalanceResponse, error) {
	out := new(UpsertBalanceResponse)
	err := c.cc.Invoke(ctx, "/balance.BalanceService/UpsertBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *balanceServiceClient) GetUserBalance(ctx context.Context, in *GetUserBalanceRequest, opts ...grpc.CallOption) (*GetUserBalanceResponse, error) {
	out := new(GetUserBalanceResponse)
	err := c.cc.Invoke(ctx, "/balance.BalanceService/GetUserBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BalanceServiceServer is the server API for BalanceService service.
type BalanceServiceServer interface {
	UpsertBalance(context.Context, *UpsertBalanceRequest) (*UpsertBalanceResponse, error)
	GetUserBalance(context.Context, *GetUserBalanceRequest) (*GetUserBalanceResponse, error)
}

// UnimplementedBalanceServiceServer can be embedded to have forward compatible implementations.
type UnimplementedBalanceServiceServer struct {
}

func (*UnimplementedBalanceServiceServer) UpsertBalance(ctx context.Context, req *UpsertBalanceRequest) (*UpsertBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertBalance not implemented")
}
func (*UnimplementedBalanceServiceServer) GetUserBalance(ctx context.Context, req *GetUserBalanceRequest) (*GetUserBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserBalance not implemented")
}

func RegisterBalanceServiceServer(s *grpc.Server, srv BalanceServiceServer) {
	s.RegisterService(&_BalanceService_serviceDesc, srv)
}

func _BalanceService_UpsertBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BalanceServiceServer).UpsertBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/balance.BalanceService/UpsertBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BalanceServiceServer).UpsertBalance(ctx, req.(*UpsertBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BalanceService_GetUserBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BalanceServiceServer).GetUserBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/balance.BalanceService/GetUserBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BalanceServiceServer).GetUserBalance(ctx, req.(*GetUserBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BalanceService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "balance.BalanceService",
	HandlerType: (*BalanceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpsertBalance",
			Handler:    _BalanceService_UpsertBalance_Handler,
		},
		{
			MethodName: "GetUserBalance",
			Handler:    _BalanceService_GetUserBalance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transactions/pb/balance.proto",
}

func (m *Balance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Balance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Balance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UpdatedAt != 0 {
		i = encodeVarintBalance(dAtA, i, uint64(m.UpdatedAt))
		i--
		dAtA[i] = 0x30
	}
	if m.CreatedAt != 0 {
		i = encodeVarintBalance(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x28
	}
	if m.Total != 0 {
		i = encodeVarintBalance(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x20
	}
	if m.Type != 0 {
		i = encodeVarintBalance(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if m.UserId != 0 {
		i = encodeVarintBalance(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintBalance(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpsertBalanceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpsertBalanceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpsertBalanceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Action != 0 {
		i = encodeVarintBalance(dAtA, i, uint64(m.Action))
		i--
		dAtA[i] = 0x20
	}
	if m.Total != 0 {
		i = encodeVarintBalance(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x18
	}
	if m.Type != 0 {
		i = encodeVarintBalance(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintBalance(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpsertBalanceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpsertBalanceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpsertBalanceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CurrentBalance != 0 {
		i = encodeVarintBalance(dAtA, i, uint64(m.CurrentBalance))
		i--
		dAtA[i] = 0x20
	}
	if m.Id != 0 {
		i = encodeVarintBalance(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintBalance(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintBalance(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UserBalance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserBalance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserBalance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Total != 0 {
		i = encodeVarintBalance(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x10
	}
	if m.Type != 0 {
		i = encodeVarintBalance(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetUserBalanceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserBalanceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetUserBalanceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UserId != 0 {
		i = encodeVarintBalance(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetUserBalanceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserBalanceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetUserBalanceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Balances) > 0 {
		for iNdEx := len(m.Balances) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Balances[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBalance(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintBalance(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintBalance(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintBalance(dAtA []byte, offset int, v uint64) int {
	offset -= sovBalance(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Balance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovBalance(uint64(m.Id))
	}
	if m.UserId != 0 {
		n += 1 + sovBalance(uint64(m.UserId))
	}
	if m.Type != 0 {
		n += 1 + sovBalance(uint64(m.Type))
	}
	if m.Total != 0 {
		n += 1 + sovBalance(uint64(m.Total))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovBalance(uint64(m.CreatedAt))
	}
	if m.UpdatedAt != 0 {
		n += 1 + sovBalance(uint64(m.UpdatedAt))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpsertBalanceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovBalance(uint64(m.UserId))
	}
	if m.Type != 0 {
		n += 1 + sovBalance(uint64(m.Type))
	}
	if m.Total != 0 {
		n += 1 + sovBalance(uint64(m.Total))
	}
	if m.Action != 0 {
		n += 1 + sovBalance(uint64(m.Action))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpsertBalanceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovBalance(uint64(m.Status))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovBalance(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovBalance(uint64(m.Id))
	}
	if m.CurrentBalance != 0 {
		n += 1 + sovBalance(uint64(m.CurrentBalance))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserBalance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovBalance(uint64(m.Type))
	}
	if m.Total != 0 {
		n += 1 + sovBalance(uint64(m.Total))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetUserBalanceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovBalance(uint64(m.UserId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetUserBalanceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovBalance(uint64(m.Status))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovBalance(uint64(l))
	}
	if len(m.Balances) > 0 {
		for _, e := range m.Balances {
			l = e.Size()
			n += 1 + l + sovBalance(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovBalance(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBalance(x uint64) (n int) {
	return sovBalance(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Balance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBalance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Balance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Balance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBalance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBalance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBalance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBalance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBalance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			m.UpdatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBalance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedAt |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBalance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBalance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpsertBalanceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBalance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpsertBalanceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpsertBalanceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBalance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBalance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBalance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBalance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= UpsertBalanceRequest_ActionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBalance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBalance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpsertBalanceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBalance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpsertBalanceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpsertBalanceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBalance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBalance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBalance
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBalance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBalance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentBalance", wireType)
			}
			m.CurrentBalance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBalance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentBalance |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBalance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBalance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserBalance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBalance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserBalance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserBalance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBalance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBalance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBalance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBalance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserBalanceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBalance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserBalanceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserBalanceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBalance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBalance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBalance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserBalanceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBalance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserBalanceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserBalanceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBalance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBalance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBalance
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBalance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBalance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBalance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBalance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Balances = append(m.Balances, &UserBalance{})
			if err := m.Balances[len(m.Balances)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBalance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBalance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBalance(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBalance
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBalance
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBalance
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBalance
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBalance
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBalance
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBalance        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBalance          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBalance = fmt.Errorf("proto: unexpected end of group")
)

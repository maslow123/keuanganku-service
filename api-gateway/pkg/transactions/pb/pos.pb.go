// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: transactions/pb/pos.proto

package pb

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type UpdateTotalPosRequest_ActionTransaction int32

const (
	UpdateTotalPosRequest_INCREASE UpdateTotalPosRequest_ActionTransaction = 0
	UpdateTotalPosRequest_DECREASE UpdateTotalPosRequest_ActionTransaction = 1
)

var UpdateTotalPosRequest_ActionTransaction_name = map[int32]string{
	0: "INCREASE",
	1: "DECREASE",
}

var UpdateTotalPosRequest_ActionTransaction_value = map[string]int32{
	"INCREASE": 0,
	"DECREASE": 1,
}

func (x UpdateTotalPosRequest_ActionTransaction) String() string {
	return proto.EnumName(UpdateTotalPosRequest_ActionTransaction_name, int32(x))
}

func (UpdateTotalPosRequest_ActionTransaction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_91b3b5ff0aa55082, []int{11, 0}
}

type Pos struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	Type                 int32    `protobuf:"varint,3,opt,name=type,proto3" json:"type"`
	Total                int32    `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`
	Color                string   `protobuf:"bytes,5,opt,name=color,proto3" json:"color"`
	CreatedAt            int32    `protobuf:"varint,6,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt            int32    `protobuf:"varint,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Pos) Reset()         { *m = Pos{} }
func (m *Pos) String() string { return proto.CompactTextString(m) }
func (*Pos) ProtoMessage()    {}
func (*Pos) Descriptor() ([]byte, []int) {
	return fileDescriptor_91b3b5ff0aa55082, []int{0}
}
func (m *Pos) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Pos) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Pos.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Pos) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pos.Merge(m, src)
}
func (m *Pos) XXX_Size() int {
	return m.Size()
}
func (m *Pos) XXX_DiscardUnknown() {
	xxx_messageInfo_Pos.DiscardUnknown(m)
}

var xxx_messageInfo_Pos proto.InternalMessageInfo

func (m *Pos) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Pos) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Pos) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *Pos) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *Pos) GetColor() string {
	if m != nil {
		return m.Color
	}
	return ""
}

func (m *Pos) GetCreatedAt() int32 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Pos) GetUpdatedAt() int32 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

// CreatePos
type CreatePosRequest struct {
	UserId               int32    `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type                 int32    `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	Color                string   `protobuf:"bytes,4,opt,name=color,proto3" json:"color,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreatePosRequest) Reset()         { *m = CreatePosRequest{} }
func (m *CreatePosRequest) String() string { return proto.CompactTextString(m) }
func (*CreatePosRequest) ProtoMessage()    {}
func (*CreatePosRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_91b3b5ff0aa55082, []int{1}
}
func (m *CreatePosRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreatePosRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreatePosRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreatePosRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreatePosRequest.Merge(m, src)
}
func (m *CreatePosRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreatePosRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreatePosRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreatePosRequest proto.InternalMessageInfo

func (m *CreatePosRequest) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *CreatePosRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreatePosRequest) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *CreatePosRequest) GetColor() string {
	if m != nil {
		return m.Color
	}
	return ""
}

type CreatePosResponse struct {
	Status               int32    `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Error                string   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Id                   int32    `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreatePosResponse) Reset()         { *m = CreatePosResponse{} }
func (m *CreatePosResponse) String() string { return proto.CompactTextString(m) }
func (*CreatePosResponse) ProtoMessage()    {}
func (*CreatePosResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_91b3b5ff0aa55082, []int{2}
}
func (m *CreatePosResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreatePosResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreatePosResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreatePosResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreatePosResponse.Merge(m, src)
}
func (m *CreatePosResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreatePosResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreatePosResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreatePosResponse proto.InternalMessageInfo

func (m *CreatePosResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *CreatePosResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *CreatePosResponse) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type PosDetailRequest struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PosDetailRequest) Reset()         { *m = PosDetailRequest{} }
func (m *PosDetailRequest) String() string { return proto.CompactTextString(m) }
func (*PosDetailRequest) ProtoMessage()    {}
func (*PosDetailRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_91b3b5ff0aa55082, []int{3}
}
func (m *PosDetailRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PosDetailRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PosDetailRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PosDetailRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PosDetailRequest.Merge(m, src)
}
func (m *PosDetailRequest) XXX_Size() int {
	return m.Size()
}
func (m *PosDetailRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PosDetailRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PosDetailRequest proto.InternalMessageInfo

func (m *PosDetailRequest) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type PosDetailResponse struct {
	Status               int32    `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Error                string   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Pos                  *Pos     `protobuf:"bytes,3,opt,name=pos,proto3" json:"pos,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PosDetailResponse) Reset()         { *m = PosDetailResponse{} }
func (m *PosDetailResponse) String() string { return proto.CompactTextString(m) }
func (*PosDetailResponse) ProtoMessage()    {}
func (*PosDetailResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_91b3b5ff0aa55082, []int{4}
}
func (m *PosDetailResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PosDetailResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PosDetailResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PosDetailResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PosDetailResponse.Merge(m, src)
}
func (m *PosDetailResponse) XXX_Size() int {
	return m.Size()
}
func (m *PosDetailResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PosDetailResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PosDetailResponse proto.InternalMessageInfo

func (m *PosDetailResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *PosDetailResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *PosDetailResponse) GetPos() *Pos {
	if m != nil {
		return m.Pos
	}
	return nil
}

type GetPosListRequest struct {
	Limit                int32    `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Page                 int32    `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	UserId               int32    `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Type                 int32    `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetPosListRequest) Reset()         { *m = GetPosListRequest{} }
func (m *GetPosListRequest) String() string { return proto.CompactTextString(m) }
func (*GetPosListRequest) ProtoMessage()    {}
func (*GetPosListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_91b3b5ff0aa55082, []int{5}
}
func (m *GetPosListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPosListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPosListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPosListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPosListRequest.Merge(m, src)
}
func (m *GetPosListRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetPosListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPosListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPosListRequest proto.InternalMessageInfo

func (m *GetPosListRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *GetPosListRequest) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *GetPosListRequest) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetPosListRequest) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

type GetPosListResponse struct {
	Status               int32    `protobuf:"varint,1,opt,name=status,proto3" json:"status"`
	Error                string   `protobuf:"bytes,2,opt,name=error,proto3" json:"error"`
	Page                 int32    `protobuf:"varint,4,opt,name=page,proto3" json:"page"`
	Limit                int32    `protobuf:"varint,3,opt,name=limit,proto3" json:"limit"`
	Pos                  []*Pos   `protobuf:"bytes,5,rep,name=pos,proto3" json:"pos"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetPosListResponse) Reset()         { *m = GetPosListResponse{} }
func (m *GetPosListResponse) String() string { return proto.CompactTextString(m) }
func (*GetPosListResponse) ProtoMessage()    {}
func (*GetPosListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_91b3b5ff0aa55082, []int{6}
}
func (m *GetPosListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPosListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPosListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPosListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPosListResponse.Merge(m, src)
}
func (m *GetPosListResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetPosListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPosListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPosListResponse proto.InternalMessageInfo

func (m *GetPosListResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *GetPosListResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *GetPosListResponse) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *GetPosListResponse) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *GetPosListResponse) GetPos() []*Pos {
	if m != nil {
		return m.Pos
	}
	return nil
}

type UpdatePosRequest struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Color                string   `protobuf:"bytes,3,opt,name=color,proto3" json:"color,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdatePosRequest) Reset()         { *m = UpdatePosRequest{} }
func (m *UpdatePosRequest) String() string { return proto.CompactTextString(m) }
func (*UpdatePosRequest) ProtoMessage()    {}
func (*UpdatePosRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_91b3b5ff0aa55082, []int{7}
}
func (m *UpdatePosRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdatePosRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdatePosRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdatePosRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdatePosRequest.Merge(m, src)
}
func (m *UpdatePosRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdatePosRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdatePosRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdatePosRequest proto.InternalMessageInfo

func (m *UpdatePosRequest) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpdatePosRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdatePosRequest) GetColor() string {
	if m != nil {
		return m.Color
	}
	return ""
}

type UpdatePosResponse struct {
	Status               int32    `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Error                string   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Pos                  *Pos     `protobuf:"bytes,3,opt,name=pos,proto3" json:"pos,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdatePosResponse) Reset()         { *m = UpdatePosResponse{} }
func (m *UpdatePosResponse) String() string { return proto.CompactTextString(m) }
func (*UpdatePosResponse) ProtoMessage()    {}
func (*UpdatePosResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_91b3b5ff0aa55082, []int{8}
}
func (m *UpdatePosResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdatePosResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdatePosResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdatePosResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdatePosResponse.Merge(m, src)
}
func (m *UpdatePosResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdatePosResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdatePosResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdatePosResponse proto.InternalMessageInfo

func (m *UpdatePosResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *UpdatePosResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *UpdatePosResponse) GetPos() *Pos {
	if m != nil {
		return m.Pos
	}
	return nil
}

type DeletePosRequest struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeletePosRequest) Reset()         { *m = DeletePosRequest{} }
func (m *DeletePosRequest) String() string { return proto.CompactTextString(m) }
func (*DeletePosRequest) ProtoMessage()    {}
func (*DeletePosRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_91b3b5ff0aa55082, []int{9}
}
func (m *DeletePosRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeletePosRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeletePosRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeletePosRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeletePosRequest.Merge(m, src)
}
func (m *DeletePosRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeletePosRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeletePosRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeletePosRequest proto.InternalMessageInfo

func (m *DeletePosRequest) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type DeletePosResponse struct {
	Status               int32    `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Error                string   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeletePosResponse) Reset()         { *m = DeletePosResponse{} }
func (m *DeletePosResponse) String() string { return proto.CompactTextString(m) }
func (*DeletePosResponse) ProtoMessage()    {}
func (*DeletePosResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_91b3b5ff0aa55082, []int{10}
}
func (m *DeletePosResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeletePosResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeletePosResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeletePosResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeletePosResponse.Merge(m, src)
}
func (m *DeletePosResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeletePosResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeletePosResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeletePosResponse proto.InternalMessageInfo

func (m *DeletePosResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *DeletePosResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type UpdateTotalPosRequest struct {
	Id                   int32                                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Action               UpdateTotalPosRequest_ActionTransaction `protobuf:"varint,2,opt,name=action,proto3,enum=pos.UpdateTotalPosRequest_ActionTransaction" json:"action,omitempty"`
	Amount               int32                                   `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                `json:"-"`
	XXX_unrecognized     []byte                                  `json:"-"`
	XXX_sizecache        int32                                   `json:"-"`
}

func (m *UpdateTotalPosRequest) Reset()         { *m = UpdateTotalPosRequest{} }
func (m *UpdateTotalPosRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateTotalPosRequest) ProtoMessage()    {}
func (*UpdateTotalPosRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_91b3b5ff0aa55082, []int{11}
}
func (m *UpdateTotalPosRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateTotalPosRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateTotalPosRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateTotalPosRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateTotalPosRequest.Merge(m, src)
}
func (m *UpdateTotalPosRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateTotalPosRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateTotalPosRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateTotalPosRequest proto.InternalMessageInfo

func (m *UpdateTotalPosRequest) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpdateTotalPosRequest) GetAction() UpdateTotalPosRequest_ActionTransaction {
	if m != nil {
		return m.Action
	}
	return UpdateTotalPosRequest_INCREASE
}

func (m *UpdateTotalPosRequest) GetAmount() int32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type UpdateTotalPosResponse struct {
	Status               int32    `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Error                string   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Total                int32    `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateTotalPosResponse) Reset()         { *m = UpdateTotalPosResponse{} }
func (m *UpdateTotalPosResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateTotalPosResponse) ProtoMessage()    {}
func (*UpdateTotalPosResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_91b3b5ff0aa55082, []int{12}
}
func (m *UpdateTotalPosResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateTotalPosResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateTotalPosResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateTotalPosResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateTotalPosResponse.Merge(m, src)
}
func (m *UpdateTotalPosResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateTotalPosResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateTotalPosResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateTotalPosResponse proto.InternalMessageInfo

func (m *UpdateTotalPosResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *UpdateTotalPosResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *UpdateTotalPosResponse) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func init() {
	proto.RegisterEnum("pos.UpdateTotalPosRequest_ActionTransaction", UpdateTotalPosRequest_ActionTransaction_name, UpdateTotalPosRequest_ActionTransaction_value)
	proto.RegisterType((*Pos)(nil), "pos.Pos")
	proto.RegisterType((*CreatePosRequest)(nil), "pos.CreatePosRequest")
	proto.RegisterType((*CreatePosResponse)(nil), "pos.CreatePosResponse")
	proto.RegisterType((*PosDetailRequest)(nil), "pos.PosDetailRequest")
	proto.RegisterType((*PosDetailResponse)(nil), "pos.PosDetailResponse")
	proto.RegisterType((*GetPosListRequest)(nil), "pos.GetPosListRequest")
	proto.RegisterType((*GetPosListResponse)(nil), "pos.GetPosListResponse")
	proto.RegisterType((*UpdatePosRequest)(nil), "pos.UpdatePosRequest")
	proto.RegisterType((*UpdatePosResponse)(nil), "pos.UpdatePosResponse")
	proto.RegisterType((*DeletePosRequest)(nil), "pos.DeletePosRequest")
	proto.RegisterType((*DeletePosResponse)(nil), "pos.DeletePosResponse")
	proto.RegisterType((*UpdateTotalPosRequest)(nil), "pos.UpdateTotalPosRequest")
	proto.RegisterType((*UpdateTotalPosResponse)(nil), "pos.UpdateTotalPosResponse")
}

func init() { proto.RegisterFile("transactions/pb/pos.proto", fileDescriptor_91b3b5ff0aa55082) }

var fileDescriptor_91b3b5ff0aa55082 = []byte{
	// 742 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0x4f, 0x6f, 0xda, 0x4a,
	0x10, 0xc7, 0x18, 0x48, 0x98, 0x17, 0xf1, 0x60, 0x15, 0x08, 0x8f, 0x17, 0xe1, 0x68, 0xdf, 0xe1,
	0xe5, 0xd0, 0x82, 0x94, 0x5e, 0x73, 0x81, 0x10, 0x55, 0x91, 0xa2, 0x8a, 0x38, 0xc9, 0xa5, 0x6a,
	0x14, 0x39, 0x78, 0x85, 0xdc, 0x12, 0xd6, 0xf5, 0x2e, 0x95, 0xf2, 0x4d, 0xfa, 0x09, 0xfa, 0x11,
	0x7a, 0xeb, 0xbd, 0xc7, 0x7e, 0x02, 0x54, 0xa5, 0x37, 0x0e, 0xfd, 0x0c, 0xd5, 0xfe, 0xb1, 0xbd,
	0xd8, 0x69, 0x0e, 0x51, 0x2f, 0xe0, 0x99, 0x9d, 0x9d, 0xf9, 0xfd, 0x66, 0x7e, 0x1e, 0xc3, 0x3f,
	0x3c, 0xf2, 0xe6, 0xcc, 0x9b, 0xf0, 0x80, 0xce, 0x59, 0x3f, 0xbc, 0xe9, 0x87, 0x94, 0xf5, 0xc2,
	0x88, 0x72, 0x8a, 0xec, 0x90, 0xb2, 0x0e, 0x4c, 0xe9, 0x94, 0x2a, 0x07, 0xfe, 0x69, 0x81, 0x3d,
	0xa6, 0x0c, 0xb5, 0xa0, 0x18, 0xf8, 0x6d, 0x6b, 0xcf, 0xda, 0x2f, 0x0f, 0x2b, 0xab, 0xa5, 0x53,
	0x0c, 0x7c, 0xb7, 0x18, 0xf8, 0x68, 0x17, 0x4a, 0x73, 0xef, 0x96, 0xb4, 0x8b, 0x7b, 0xd6, 0x7e,
	0x75, 0xb8, 0xb9, 0x5a, 0x3a, 0xd2, 0x76, 0xe5, 0xaf, 0x38, 0xe5, 0x77, 0x21, 0x69, 0xdb, 0xf2,
	0x9e, 0x3c, 0x15, 0xb6, 0x2b, 0x7f, 0xd1, 0x36, 0x94, 0x39, 0xe5, 0xde, 0xac, 0x5d, 0x12, 0xc7,
	0xae, 0x32, 0x90, 0x03, 0xe5, 0x09, 0x9d, 0xd1, 0xa8, 0x5d, 0x96, 0x29, 0xab, 0xab, 0xa5, 0xa3,
	0x1c, 0xae, 0xfa, 0x43, 0xcf, 0x01, 0x26, 0x11, 0xf1, 0x38, 0xf1, 0xaf, 0x3d, 0xde, 0xae, 0xc8,
	0xd4, 0xb5, 0xd5, 0xd2, 0x31, 0xbc, 0x6e, 0x55, 0x3f, 0x0f, 0xb8, 0x08, 0x5f, 0x84, 0x7e, 0x1c,
	0xbe, 0x91, 0x86, 0xa7, 0x5e, 0xb7, 0xaa, 0x9f, 0x07, 0x1c, 0x07, 0x50, 0x3f, 0x92, 0x77, 0xc7,
	0x94, 0xb9, 0xe4, 0xfd, 0x82, 0x30, 0x8e, 0x76, 0x60, 0x63, 0xc1, 0x48, 0x74, 0x1d, 0x77, 0xc0,
	0xad, 0x08, 0xf3, 0xc4, 0x47, 0xc8, 0x64, 0xaf, 0x39, 0x23, 0x93, 0x73, 0xca, 0x54, 0x71, 0x2a,
	0xc9, 0x40, 0x65, 0xe0, 0x33, 0x68, 0x18, 0xa5, 0x58, 0x48, 0xe7, 0x8c, 0xa0, 0x16, 0x54, 0x18,
	0xf7, 0xf8, 0x82, 0xc5, 0xa5, 0x94, 0x25, 0x52, 0x90, 0x28, 0xa2, 0x91, 0xae, 0xa5, 0x0c, 0x54,
	0x93, 0x63, 0x51, 0xa5, 0x8a, 0x81, 0x8f, 0x31, 0xd4, 0xc7, 0x94, 0x8d, 0x08, 0xf7, 0x82, 0x59,
	0x8c, 0xbe, 0x96, 0x8e, 0x4e, 0xc6, 0x5c, 0x41, 0xc3, 0x88, 0x79, 0x52, 0xd9, 0x0e, 0x08, 0xa1,
	0xc8, 0xba, 0x7f, 0x1d, 0x6c, 0xf6, 0x84, 0x7e, 0x04, 0x07, 0xe1, 0xc4, 0x6f, 0xa1, 0xf1, 0x92,
	0xf0, 0x31, 0x65, 0xa7, 0x01, 0xe3, 0x31, 0x86, 0x6d, 0x28, 0xcf, 0x82, 0xdb, 0x80, 0xeb, 0xec,
	0xca, 0x10, 0xad, 0x0a, 0xbd, 0xa9, 0x6a, 0x5f, 0xd9, 0x95, 0xcf, 0x66, 0xaf, 0xed, 0x6c, 0xaf,
	0x65, 0x5f, 0x4b, 0x69, 0x5f, 0xf1, 0x17, 0x0b, 0x90, 0x59, 0x4c, 0x93, 0xc1, 0xeb, 0x64, 0x86,
	0xb0, 0x5a, 0x3a, 0xda, 0x93, 0x10, 0x73, 0xd6, 0x88, 0x29, 0x99, 0x49, 0x47, 0xcc, 0x71, 0x57,
	0x83, 0x2b, 0xa5, 0xda, 0x15, 0xb6, 0x86, 0xe9, 0xc4, 0x84, 0x94, 0xb4, 0xe5, 0x75, 0xe9, 0x88,
	0xb9, 0xfd, 0xa7, 0x5a, 0x54, 0xde, 0xb3, 0xcd, 0x16, 0x0d, 0x37, 0x56, 0x4b, 0x47, 0x1c, 0xa8,
	0x5e, 0x9d, 0x42, 0xfd, 0x52, 0x2a, 0xcf, 0x10, 0x5b, 0x66, 0x5c, 0x0f, 0x6a, 0x2c, 0xd1, 0x93,
	0x6d, 0xea, 0xe9, 0x0a, 0x1a, 0x46, 0xb6, 0x3f, 0x3e, 0x58, 0x0c, 0xf5, 0x11, 0x99, 0x91, 0xc7,
	0xc0, 0xe2, 0x01, 0x34, 0x8c, 0x98, 0xa7, 0x40, 0xc0, 0x9f, 0x2d, 0x68, 0x2a, 0x1a, 0x17, 0x62,
	0x1f, 0x3c, 0xd2, 0x99, 0x11, 0x54, 0xd4, 0x12, 0x93, 0x09, 0x6a, 0x07, 0xcf, 0x24, 0xde, 0x07,
	0xef, 0xf6, 0x06, 0x32, 0xf0, 0x22, 0x5d, 0x7c, 0xae, 0xbe, 0x2b, 0xd0, 0x79, 0xb7, 0x74, 0x31,
	0xe7, 0xb1, 0xde, 0x94, 0x85, 0xfb, 0xd0, 0xc8, 0x5d, 0x42, 0x5b, 0xb0, 0x79, 0xf2, 0xea, 0xc8,
	0x3d, 0x1e, 0x9c, 0x1f, 0xd7, 0x0b, 0xc2, 0x1a, 0x1d, 0x6b, 0xcb, 0xc2, 0x6f, 0xa0, 0x95, 0xad,
	0xfd, 0xa4, 0x19, 0x24, 0x6b, 0xd1, 0x36, 0xd6, 0xe2, 0xc1, 0x27, 0x1b, 0x60, 0x4c, 0xd9, 0x39,
	0x89, 0x3e, 0x04, 0x13, 0x82, 0x0e, 0xa1, 0x9a, 0xec, 0x0e, 0xd4, 0x94, 0xc4, 0xb3, 0x6b, 0xab,
	0xd3, 0xca, 0xba, 0x15, 0x1c, 0x5c, 0x40, 0x03, 0xd8, 0x52, 0xaf, 0xcd, 0xf0, 0xee, 0x92, 0x91,
	0x08, 0xa9, 0xc8, 0xdc, 0x6b, 0xdb, 0xd9, 0xc9, 0xf9, 0x93, 0x14, 0x87, 0x50, 0x4d, 0xb6, 0x88,
	0x06, 0x90, 0xdd, 0x3c, 0x1a, 0x40, 0x6e, 0xd9, 0xe0, 0x02, 0x1a, 0xc2, 0xdf, 0x89, 0x54, 0x35,
	0x86, 0xa6, 0x31, 0xbd, 0x1c, 0x89, 0x9c, 0xae, 0x55, 0x8e, 0x44, 0x6b, 0x6b, 0x39, 0xb2, 0x2a,
	0xd5, 0x39, 0x72, 0xc2, 0xc4, 0x05, 0x74, 0x06, 0xdb, 0xeb, 0x33, 0xd3, 0x89, 0x3a, 0xbf, 0x97,
	0x52, 0xe7, 0xdf, 0x07, 0xcf, 0xe2, 0x94, 0xc3, 0xff, 0xbf, 0xde, 0x77, 0xad, 0x6f, 0xf7, 0x5d,
	0xeb, 0xfb, 0x7d, 0xd7, 0xfa, 0xf8, 0xa3, 0x5b, 0x78, 0xdd, 0xec, 0xf5, 0xc3, 0x77, 0xd3, 0x7e,
	0xe6, 0xab, 0x7b, 0x53, 0x91, 0x5f, 0xd8, 0x17, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0x03, 0x21,
	0x3b, 0xe6, 0x8f, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PosServiceClient is the client API for PosService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PosServiceClient interface {
	CreatePos(ctx context.Context, in *CreatePosRequest, opts ...grpc.CallOption) (*CreatePosResponse, error)
	GetPosByUser(ctx context.Context, in *GetPosListRequest, opts ...grpc.CallOption) (*GetPosListResponse, error)
	PosDetail(ctx context.Context, in *PosDetailRequest, opts ...grpc.CallOption) (*PosDetailResponse, error)
	UpdatePosByUser(ctx context.Context, in *UpdatePosRequest, opts ...grpc.CallOption) (*UpdatePosResponse, error)
	DeletePosByUser(ctx context.Context, in *DeletePosRequest, opts ...grpc.CallOption) (*DeletePosResponse, error)
	UpdateTotalPosByUser(ctx context.Context, in *UpdateTotalPosRequest, opts ...grpc.CallOption) (*UpdateTotalPosResponse, error)
}

type posServiceClient struct {
	cc *grpc.ClientConn
}

func NewPosServiceClient(cc *grpc.ClientConn) PosServiceClient {
	return &posServiceClient{cc}
}

func (c *posServiceClient) CreatePos(ctx context.Context, in *CreatePosRequest, opts ...grpc.CallOption) (*CreatePosResponse, error) {
	out := new(CreatePosResponse)
	err := c.cc.Invoke(ctx, "/pos.PosService/CreatePos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posServiceClient) GetPosByUser(ctx context.Context, in *GetPosListRequest, opts ...grpc.CallOption) (*GetPosListResponse, error) {
	out := new(GetPosListResponse)
	err := c.cc.Invoke(ctx, "/pos.PosService/GetPosByUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posServiceClient) PosDetail(ctx context.Context, in *PosDetailRequest, opts ...grpc.CallOption) (*PosDetailResponse, error) {
	out := new(PosDetailResponse)
	err := c.cc.Invoke(ctx, "/pos.PosService/PosDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posServiceClient) UpdatePosByUser(ctx context.Context, in *UpdatePosRequest, opts ...grpc.CallOption) (*UpdatePosResponse, error) {
	out := new(UpdatePosResponse)
	err := c.cc.Invoke(ctx, "/pos.PosService/UpdatePosByUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posServiceClient) DeletePosByUser(ctx context.Context, in *DeletePosRequest, opts ...grpc.CallOption) (*DeletePosResponse, error) {
	out := new(DeletePosResponse)
	err := c.cc.Invoke(ctx, "/pos.PosService/DeletePosByUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posServiceClient) UpdateTotalPosByUser(ctx context.Context, in *UpdateTotalPosRequest, opts ...grpc.CallOption) (*UpdateTotalPosResponse, error) {
	out := new(UpdateTotalPosResponse)
	err := c.cc.Invoke(ctx, "/pos.PosService/UpdateTotalPosByUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PosServiceServer is the server API for PosService service.
type PosServiceServer interface {
	CreatePos(context.Context, *CreatePosRequest) (*CreatePosResponse, error)
	GetPosByUser(context.Context, *GetPosListRequest) (*GetPosListResponse, error)
	PosDetail(context.Context, *PosDetailRequest) (*PosDetailResponse, error)
	UpdatePosByUser(context.Context, *UpdatePosRequest) (*UpdatePosResponse, error)
	DeletePosByUser(context.Context, *DeletePosRequest) (*DeletePosResponse, error)
	UpdateTotalPosByUser(context.Context, *UpdateTotalPosRequest) (*UpdateTotalPosResponse, error)
}

// UnimplementedPosServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPosServiceServer struct {
}

func (*UnimplementedPosServiceServer) CreatePos(ctx context.Context, req *CreatePosRequest) (*CreatePosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePos not implemented")
}
func (*UnimplementedPosServiceServer) GetPosByUser(ctx context.Context, req *GetPosListRequest) (*GetPosListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPosByUser not implemented")
}
func (*UnimplementedPosServiceServer) PosDetail(ctx context.Context, req *PosDetailRequest) (*PosDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PosDetail not implemented")
}
func (*UnimplementedPosServiceServer) UpdatePosByUser(ctx context.Context, req *UpdatePosRequest) (*UpdatePosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePosByUser not implemented")
}
func (*UnimplementedPosServiceServer) DeletePosByUser(ctx context.Context, req *DeletePosRequest) (*DeletePosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePosByUser not implemented")
}
func (*UnimplementedPosServiceServer) UpdateTotalPosByUser(ctx context.Context, req *UpdateTotalPosRequest) (*UpdateTotalPosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTotalPosByUser not implemented")
}

func RegisterPosServiceServer(s *grpc.Server, srv PosServiceServer) {
	s.RegisterService(&_PosService_serviceDesc, srv)
}

func _PosService_CreatePos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosServiceServer).CreatePos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.PosService/CreatePos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosServiceServer).CreatePos(ctx, req.(*CreatePosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosService_GetPosByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPosListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosServiceServer).GetPosByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.PosService/GetPosByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosServiceServer).GetPosByUser(ctx, req.(*GetPosListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosService_PosDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PosDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosServiceServer).PosDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.PosService/PosDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosServiceServer).PosDetail(ctx, req.(*PosDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosService_UpdatePosByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosServiceServer).UpdatePosByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.PosService/UpdatePosByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosServiceServer).UpdatePosByUser(ctx, req.(*UpdatePosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosService_DeletePosByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosServiceServer).DeletePosByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.PosService/DeletePosByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosServiceServer).DeletePosByUser(ctx, req.(*DeletePosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosService_UpdateTotalPosByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTotalPosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosServiceServer).UpdateTotalPosByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.PosService/UpdateTotalPosByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosServiceServer).UpdateTotalPosByUser(ctx, req.(*UpdateTotalPosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PosService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pos.PosService",
	HandlerType: (*PosServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePos",
			Handler:    _PosService_CreatePos_Handler,
		},
		{
			MethodName: "GetPosByUser",
			Handler:    _PosService_GetPosByUser_Handler,
		},
		{
			MethodName: "PosDetail",
			Handler:    _PosService_PosDetail_Handler,
		},
		{
			MethodName: "UpdatePosByUser",
			Handler:    _PosService_UpdatePosByUser_Handler,
		},
		{
			MethodName: "DeletePosByUser",
			Handler:    _PosService_DeletePosByUser_Handler,
		},
		{
			MethodName: "UpdateTotalPosByUser",
			Handler:    _PosService_UpdateTotalPosByUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transactions/pb/pos.proto",
}

func (m *Pos) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pos) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Pos) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UpdatedAt != 0 {
		i = encodeVarintPos(dAtA, i, uint64(m.UpdatedAt))
		i--
		dAtA[i] = 0x38
	}
	if m.CreatedAt != 0 {
		i = encodeVarintPos(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Color) > 0 {
		i -= len(m.Color)
		copy(dAtA[i:], m.Color)
		i = encodeVarintPos(dAtA, i, uint64(len(m.Color)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Total != 0 {
		i = encodeVarintPos(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x20
	}
	if m.Type != 0 {
		i = encodeVarintPos(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPos(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintPos(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreatePosRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreatePosRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreatePosRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Color) > 0 {
		i -= len(m.Color)
		copy(dAtA[i:], m.Color)
		i = encodeVarintPos(dAtA, i, uint64(len(m.Color)))
		i--
		dAtA[i] = 0x22
	}
	if m.Type != 0 {
		i = encodeVarintPos(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPos(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.UserId != 0 {
		i = encodeVarintPos(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreatePosResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreatePosResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreatePosResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintPos(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintPos(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintPos(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PosDetailRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PosDetailRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PosDetailRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintPos(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PosDetailResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PosDetailResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PosDetailResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Pos != nil {
		{
			size, err := m.Pos.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPos(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintPos(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintPos(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetPosListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPosListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPosListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Type != 0 {
		i = encodeVarintPos(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x20
	}
	if m.UserId != 0 {
		i = encodeVarintPos(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Page != 0 {
		i = encodeVarintPos(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x10
	}
	if m.Limit != 0 {
		i = encodeVarintPos(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetPosListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPosListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPosListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Pos) > 0 {
		for iNdEx := len(m.Pos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPos(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Page != 0 {
		i = encodeVarintPos(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x20
	}
	if m.Limit != 0 {
		i = encodeVarintPos(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintPos(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintPos(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdatePosRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdatePosRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdatePosRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Color) > 0 {
		i -= len(m.Color)
		copy(dAtA[i:], m.Color)
		i = encodeVarintPos(dAtA, i, uint64(len(m.Color)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPos(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintPos(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdatePosResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdatePosResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdatePosResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Pos != nil {
		{
			size, err := m.Pos.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPos(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintPos(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintPos(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeletePosRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeletePosRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeletePosRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintPos(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeletePosResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeletePosResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeletePosResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintPos(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintPos(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateTotalPosRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateTotalPosRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateTotalPosRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Amount != 0 {
		i = encodeVarintPos(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x18
	}
	if m.Action != 0 {
		i = encodeVarintPos(dAtA, i, uint64(m.Action))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintPos(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateTotalPosResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateTotalPosResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateTotalPosResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Total != 0 {
		i = encodeVarintPos(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintPos(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintPos(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPos(dAtA []byte, offset int, v uint64) int {
	offset -= sovPos(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Pos) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPos(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPos(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovPos(uint64(m.Type))
	}
	if m.Total != 0 {
		n += 1 + sovPos(uint64(m.Total))
	}
	l = len(m.Color)
	if l > 0 {
		n += 1 + l + sovPos(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovPos(uint64(m.CreatedAt))
	}
	if m.UpdatedAt != 0 {
		n += 1 + sovPos(uint64(m.UpdatedAt))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreatePosRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovPos(uint64(m.UserId))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPos(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovPos(uint64(m.Type))
	}
	l = len(m.Color)
	if l > 0 {
		n += 1 + l + sovPos(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreatePosResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovPos(uint64(m.Status))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovPos(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovPos(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PosDetailRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPos(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PosDetailResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovPos(uint64(m.Status))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovPos(uint64(l))
	}
	if m.Pos != nil {
		l = m.Pos.Size()
		n += 1 + l + sovPos(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetPosListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Limit != 0 {
		n += 1 + sovPos(uint64(m.Limit))
	}
	if m.Page != 0 {
		n += 1 + sovPos(uint64(m.Page))
	}
	if m.UserId != 0 {
		n += 1 + sovPos(uint64(m.UserId))
	}
	if m.Type != 0 {
		n += 1 + sovPos(uint64(m.Type))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetPosListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovPos(uint64(m.Status))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovPos(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovPos(uint64(m.Limit))
	}
	if m.Page != 0 {
		n += 1 + sovPos(uint64(m.Page))
	}
	if len(m.Pos) > 0 {
		for _, e := range m.Pos {
			l = e.Size()
			n += 1 + l + sovPos(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdatePosRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPos(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPos(uint64(l))
	}
	l = len(m.Color)
	if l > 0 {
		n += 1 + l + sovPos(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdatePosResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovPos(uint64(m.Status))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovPos(uint64(l))
	}
	if m.Pos != nil {
		l = m.Pos.Size()
		n += 1 + l + sovPos(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeletePosRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPos(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeletePosResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovPos(uint64(m.Status))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovPos(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateTotalPosRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPos(uint64(m.Id))
	}
	if m.Action != 0 {
		n += 1 + sovPos(uint64(m.Action))
	}
	if m.Amount != 0 {
		n += 1 + sovPos(uint64(m.Amount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateTotalPosResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovPos(uint64(m.Status))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovPos(uint64(l))
	}
	if m.Total != 0 {
		n += 1 + sovPos(uint64(m.Total))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPos(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPos(x uint64) (n int) {
	return sovPos(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Pos) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pos: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pos: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Color", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Color = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			m.UpdatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedAt |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreatePosRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreatePosRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreatePosRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Color", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Color = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreatePosResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreatePosResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreatePosResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PosDetailRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PosDetailRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PosDetailRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PosDetailResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PosDetailResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PosDetailResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPos
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pos == nil {
				m.Pos = &Pos{}
			}
			if err := m.Pos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPosListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPosListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPosListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPosListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPosListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPosListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPos
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pos = append(m.Pos, &Pos{})
			if err := m.Pos[len(m.Pos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdatePosRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdatePosRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdatePosRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Color", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Color = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdatePosResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdatePosResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdatePosResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPos
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pos == nil {
				m.Pos = &Pos{}
			}
			if err := m.Pos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeletePosRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeletePosRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeletePosRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeletePosResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeletePosResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeletePosResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateTotalPosRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateTotalPosRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateTotalPosRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= UpdateTotalPosRequest_ActionTransaction(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateTotalPosResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateTotalPosResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateTotalPosResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPos(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPos
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPos
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPos
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPos
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPos
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPos
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPos        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPos          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPos = fmt.Errorf("proto: unexpected end of group")
)
